// <auto-generated />
using HelpDeskAPINew.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HelpDeskAPINew.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HelpDeskAPINew.Models.Admin", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Category", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.HasIndex("PriorityName");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Department", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Priority", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Staff", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Name");

                    b.HasIndex("DepartmentName");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Status", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.HasIndex("StaffName");

                    b.HasIndex("StatusName");

                    b.HasIndex("Username");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.TicketChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketChats");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.User", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.UserTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserName");

                    b.ToTable("UserTickets");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Category", b =>
                {
                    b.HasOne("HelpDeskAPINew.Models.Priority", "Priority")
                        .WithMany("Categories")
                        .HasForeignKey("PriorityName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Staff", b =>
                {
                    b.HasOne("HelpDeskAPINew.Models.Department", "Department")
                        .WithMany("Staff")
                        .HasForeignKey("DepartmentName");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Ticket", b =>
                {
                    b.HasOne("HelpDeskAPINew.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelpDeskAPINew.Models.Staff", "Staff")
                        .WithMany("Tickets")
                        .HasForeignKey("StaffName");

                    b.HasOne("HelpDeskAPINew.Models.Status", "Status")
                        .WithMany("Ticket")
                        .HasForeignKey("StatusName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelpDeskAPINew.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Staff");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.TicketChat", b =>
                {
                    b.HasOne("HelpDeskAPINew.Models.Ticket", "Ticket")
                        .WithMany("TicketChats")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.UserTicket", b =>
                {
                    b.HasOne("HelpDeskAPINew.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserName");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Department", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Priority", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Staff", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Status", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.Ticket", b =>
                {
                    b.Navigation("TicketChats");
                });

            modelBuilder.Entity("HelpDeskAPINew.Models.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
